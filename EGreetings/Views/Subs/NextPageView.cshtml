@model List<EGreetings.Models.ViewModelAccount.SmallTemplate>
@{
    ViewData["Title"] = "Selected Templates";
}

<div class="sidesubmonth w-full flex flex-col justify-start items-start">
    <div class="w-full text-center title-sete mt-2">Selected Templates</div>
    <div id="selected-templates" class="w-full flex flex-col justify-center items-center mt-5">
        <!-- Loop over the selected templates and display them -->
        <div class="w-full flex justify-between items-center">
            @foreach (var template in Model)
            {

                <div class="flex flex-col justify-center items-center">
                    @* <p>Template ID: @template.id</p> *@
                    <img src="@Url.Content(template.ImgVer ?? "default-image.jpg")" alt="@template.TemplateName" class="template-imagesub" />
                    <div class="name-template my-2">@template.TemplateName</div>
                    <a href="javascript:void(0);" class="btn-submonth" data-template-id="@template.id"> Edit</a>
                </div>
            }


        </div>

    </div>
    <div class="flex justify-end items-center">
        <a asp-action="SubFillMail" asp-controller="Subs" class="btn-submonth">Next</a>
    </div>
</div>

<!-- Modal for selecting orientation -->
<!-- Modal for selecting orientation -->
<div id="templateOptionsDialog" class="hidden flex flex-col justify-content-center items-center">
    <h3 class="text-xl font-semibold mb-4 text-center mt-5" >Select the image orientation:</h3>

    <div class="mb-4 mt-4">
        <div id="imageVer" class="mb-4 flex justify-between items-center m-3 px-3">
            <img id="templateImageVer" src="" alt="Vertical Image" class="h-auto mb-4 shadow-md px-2" />
            <img id="templateImageHoz" src="" alt="Horizontal Image" class="h-auto mb-4 shadow-md ms-3 px-2" />
        </div>
    </div>

    <div class="mb-4 flex justify-content-center items-center mx-3 mt-2 space-x-8">
        <label class="inline-flex items-center px-2">
            <input type="radio" name="imageOrientation" value="Ver" class="form-radio text-blue-500" />
            <span>Vertical (Ver)</span>
        </label>

        <label class="inline-flex items-center px-2">
            <input type="radio" name="imageOrientation" value="Hoz" class="form-radio text-blue-500" />
            <span>Horizontal (Hoz)</span>
        </label>
    </div>

    <div class="flex justify-center space-x-2 mt-3">
        <button id="confirmOrientationBtn" class="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 focus:outline-none">Confirm</button>
        <button id="cancelOrientationBtn" class="bg-red-700 text-white py-2 px-4 rounded hover:bg-gray-400 focus:outline-none">Cancel</button>
    </div>
</div>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
     document.addEventListener('DOMContentLoaded', function () {
        // Event listener for the "Edit" buttons
        document.querySelectorAll('.btn-submonth').forEach(button => {
            button.addEventListener('click', function () {
                try {
                    // Get the templateId from the data-template-id attribute
                    const templateId = button.getAttribute('data-template-id');
                    console.log("Template ID: ", templateId); // Check the value of templateId

                    // Call showOrientationDialog with the retrieved templateId
                    if (templateId) {
                        window.showOrientationDialog(templateId);
                    } else {
                        console.error("Invalid Template ID.");
                    }
                } catch (error) {
                    console.error('Error handling click on btn-submonth:', error);
                }
            });
        });

        // Function to display the modal with template details
        window.showOrientationDialog = function (templateId) {
            console.log("showOrientationDialog triggered for template ID:", templateId); // Debugging

            // Fetch template details
            fetch(`/ECard/GetTemplateDetails/${templateId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Failed to fetch template details: " + response.statusText);
                    }
                    return response.json();
                })
                .then(template => {
                    console.log("Fetched template:", template); // Log fetched template

                    if (template) {
                        // Store the selected template
                        window.selectedTemplate = template;

                        // Update the modal content with the fetched template data
                        updateModalContent(template);

                        // Show the modal
                        showModal();

                        // Bind the confirm button's click event after showing the modal
                        bindConfirmButton(template);
                    } else {
                        console.error('Template not found');
                        alert('Template not found. Please try again.');
                    }
                })
                
        };

        // Function to update the modal content
        function updateModalContent(template) {
            const imageVer = document.getElementById('templateImageVer');
            const imageHoz = document.getElementById('templateImageHoz');
            const templateNameElem = document.getElementById('templateName');

            // Update vertical image
            if (imageVer) {
                imageVer.src = template.imgVer ? `/images/templates/img/${template.imgVer}` : '/images/templates/img/default-image.jpg';
            }

            // Update horizontal image
            if (imageHoz) {
                imageHoz.src = template.imgHoz ? `/images/templates/img/${template.imgHoz}` : '/images/templates/img/default-image.jpg';
            }

            // Update the template name in the modal
            if (templateNameElem) {
                templateNameElem.textContent = `Select the image orientation for template: ${template.TemplateName}`;
            }
        }

        // Show the modal with fade-in effect
        function showModal() {
            const modal = document.getElementById('templateOptionsDialog');
            if (modal) {
                modal.classList.remove('hidden'); // Show the modal
                modal.style.transition = 'opacity 0.3s';
                modal.style.opacity = 1; // Fade-in effect
            }
        }

        // Bind the confirm button click event

        // Confirm Orientation button click
        document.getElementById('confirmOrientationBtn').addEventListener('click', function() {
            try {
                const selectedOrientation = document.querySelector('input[name="imageOrientation"]:checked');
                if (selectedOrientation) {
                    const templateId = window.selectedTemplate.id;
                    const imgVer = window.selectedTemplate.imgVer;
                    const imgHoz = window.selectedTemplate.imgHoz;
                    const orientation = selectedOrientation.value;

                    console.log('Redirecting with these values:');
                    console.log(`Template ID: ${templateId}, Orientation: ${orientation}`);

                    window.location.href = `/ECard/ECardDesign?templateId=${templateId}&imgVer=${imgVer}&imgHoz=${imgHoz}&orientation=${orientation}`;
                } else {
                    alert('Please select an orientation before continuing.');
                }
            } catch (error) {
                console.error('Error in confirmOrientationBtn click:', error);
            }
        });

        // Cancel button click
        document.getElementById('cancelOrientationBtn').addEventListener('click', function() {
            try {
                const modal = document.getElementById('templateOptionsDialog');
                if (modal) {
                    modal.classList.add('hidden'); // Hide the modal
                    modal.style.opacity = 0; // Optionally reset opacity
                }
            } catch (error) {
                console.error('Error in cancelOrientationBtn click:', error);
            }
        });


      


    });




</script>
