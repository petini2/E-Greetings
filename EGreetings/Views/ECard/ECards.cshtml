@model EGreetings.Models.ViewModelAccount.ECardViewModel
@{
    ViewData["Title"] = "ECards";
}


<div class="w-full w-all-ecard flex">

    <div class="w-sidecard flex flex-col">
        <div class="w-full flex flex-col px-5 pt-5 pb-3">
            <div class="py-3 text-tilte-filter">
                Filter By Price
            </div>
            <form method="get" action="@Url.Action("Index", "ECard")" id="filterForm" class="p3">
                <div class="p-2">
                    <label class="flex justify-content-start align-items-center">
                        <input type="radio" name="priceFilter" value="lowestToHighest" id="lowestToHighest"
                        @(Model.PriceFilter == "lowestToHighest" ? "checked" : "") />
                        <span class="categoryFiltertext categoryFilterbig">Lowest To Highest</span>
                    </label>
                </div>
                <div class="p-2">
                    <label class="flex justify-content-start align-items-center">
                        <input type="radio" name="priceFilter" value="highestToLowest" id="highestToLowest"
                        @(Model.PriceFilter == "highestToLowest" ? "checked" : "") />
                        <span class="categoryFiltertext categoryFilterbig">Highest To Lowest</span>
                    </label>
                </div>
            </form>


        </div>

        <div class="w-full flex flex-col px-5 ">
            <div class="py-3 text-tilte-filter">
                Select Categories
            </div>
            <form method="get" action="@Url.Action("Index", "ECard")" class="form-selecttemp">
                <div class="px-2 py-1">
                    <!-- Dropdown sử dụng Tailwind CSS -->
                    <details class="dropdown">
                        <summary class="m-1 categoryFilterbig">Birthday</summary>
                        <ul class="menu dropdown-content bg-base-100 rounded-box z-[1] w-full p-2 relative">
                            @foreach (var category in Model.Categories)
                            {
                                if (category.GroupCate == "BD")
                                {
                                    <li>
                                        <!-- Checkbox để chọn các category. -->
                                        <label class="flex items-center">
                                            <input type="checkbox" class="categoryFilter" name="selectedCategories" value="@category.CategoryID"
                                                   onchange="applyFilters()"
                                            @(Model.SelectedCategories != null && Model.SelectedCategories.Contains(category.CategoryID) ? "checked" : "") />
                                            <span class="categoryFiltertext">@category.CategoryName</span>
                                        </label>
                                    </li>
                                }
                            }
                        </ul>
                    </details>


                </div>

                <div class="px-2 py-1">
                    <details class="dropdown">
                        <summary class=" m-1 categoryFilterbig">New Year</summary>
                        <ul class="menu dropdown-content bg-base-100 rounded-box z-[1] w-full p-2  relative">
                            @foreach (var category in Model.Categories)
                            {
                                if (category.GroupCate == "NY")
                                {
                                    <li>
                                        <!-- Thêm mỗi checkbox vào danh sách dropdown -->
                                        <label class="flex items-center">
                                            <input type="checkbox" class="categoryFilter" name="selectedCategories" value="@category.CategoryID" onchange="applyFilters()" />
                                            <span class="categoryFiltertext">@category.CategoryName</span>
                                        </label>
                                    </li>
                                }
                            }
                        </ul>
                    </details>
                </div>

                <div class="px-2 py-1">
                    <details class="dropdown">
                        <summary class=" m-1 categoryFilterbig">Wedding</summary>
                        <ul class="menu dropdown-content bg-base-100 rounded-box z-[1] w-full p-2  relative">
                            @foreach (var category in Model.Categories)
                            {
                                if (category.GroupCate == "WD")
                                {
                                    <li>
                                        <!-- Thêm mỗi checkbox vào danh sách dropdown -->
                                        <label class="flex items-center">
                                            <input type="checkbox" class="categoryFilter" name="selectedCategories" value="@category.CategoryID" onchange="applyFilters()" />
                                            <span class="categoryFiltertext">@category.CategoryName</span>
                                        </label>
                                    </li>
                                }
                            }
                        </ul>
                    </details>
                </div>
                <div class="px-2 py-1">
                    <details class="dropdown">
                        <summary class=" m-1 categoryFilterbig">Love</summary>
                        <ul class="menu dropdown-content bg-base-100 rounded-box z-[1] w-full p-2  relative">
                            @foreach (var category in Model.Categories)
                            {
                                if (category.GroupCate == "LV")
                                {
                                    <li>
                                        <!-- Thêm mỗi checkbox vào danh sách dropdown -->
                                        <label class="flex items-center">
                                            <input type="checkbox" class="categoryFilter" name="selectedCategories" value="@category.CategoryID" onchange="applyFilters()" />
                                            <span class="categoryFiltertext">@category.CategoryName</span>
                                        </label>
                                    </li>
                                }
                            }
                        </ul>
                    </details>
                </div>
                <div class="px-2 py-1">
                    <details class="dropdown">
                        <summary class=" m-1 categoryFilterbig">Festivals</summary>
                        <ul class="menu dropdown-content bg-base-100 rounded-box z-[1] w-full p-2  relative">
                            @foreach (var category in Model.Categories)
                            {
                                if (category.GroupCate == "FE")
                                {
                                    <li>
                                        <!-- Thêm mỗi checkbox vào danh sách dropdown -->
                                        <label class="flex items-center">
                                            <input type="checkbox" class="categoryFilter" name="selectedCategories" value="@category.CategoryID" onchange="applyFilters()" />
                                            <span class="categoryFiltertext">@category.CategoryName</span>
                                        </label>
                                    </li>
                                }
                            }
                        </ul>
                    </details>
                </div>
                <div class="px-2 py-1">
                    <details class="dropdown">
                        <summary class=" m-1 categoryFilterbig">Others</summary>
                        <ul class="menu dropdown-content bg-base-100 rounded-box z-[1] w-full p-2  relative">
                            @foreach (var category in Model.Categories)
                            {
                                if (category.GroupCate == "OT")
                                {
                                    <li>
                                        <!-- Thêm mỗi checkbox vào danh sách dropdown -->
                                        <label class="flex items-center">
                                            <input type="checkbox" class="categoryFilter" name="selectedCategories" value="@category.CategoryID" onchange="applyFilters()" />
                                            <span class="categoryFiltertext">@category.CategoryName</span>
                                        </label>
                                    </li>
                                }
                            }
                        </ul>
                    </details>
                </div>
            </form>
        </div>



    </div>
    <div class="w-maincard">
        <div class="title-ecardd">
            Our Templates
        </div>
        <div class="btn-search-card">
            <form method="get" action="@Url.Action("Index", "ECard")" class="form-searchtemp">
                <input type="text" class="btn-inputsearch" name="searchQuery" value="@Model.SearchQuery" />

                <!-- Hidden fields to retain filter values -->
                <input type="hidden" name="priceFilter" value="@Model.PriceFilter" />


                <div class="img-search">
                    <img src="~/image_design/Search.png" alt="Search" />
                </div>
            </form>

        </div>
        <div class="e-cards">

            @foreach (var template in Model.Templates)
            {
                <div class="item-a1" data-template-id="@template.TemplatesID">
                    <div class="mt-5 me-3">
                        <div class="flex flex-col justify-center items-center item-product">
                            <img src="@Url.Content("~/images/templates/img/" + (template.ImgVer ?? "default-image.jpg"))" alt="@template.TemplateName" class="img-template" />
                            <div class="w-content-card flex flex-col ">
                                <div class="text-center px-3 py-4 name-template">@template.TemplateName</div>
                                @if (template.Discount > 0)
                                {
                                    <div class="w-full  flex justify-content-between align-items-center">
                                        <s>$@template.Price</s>
                                        <span class="exactly-price text-center">$@((template.Price - (template.Discount ?? 0f)))</span>
                                    </div>
                                }
                                else
                                {

                                    <div class="w-full  flex justify-content-between align-items-center">
                                        <s></s>
                                        <span class="exactly-price">$@template.Price</span>
                                    </div>
                                }

                            </div>
                            <div class="overplay1">

                                <a href="#" class="btn-buy">Use this card</a>

                            </div>

                        </div>
                    </div>
                </div>
            }


        </div>
        <div class="pagination">
            <div class="pagination">
                <div class="pagination">
                    <div class="pagination">
                        <!-- Prev Button -->
                        @if (ViewBag.CurrentPage > 1)
                        {
                            <a href="@Url.Action("Index", new { page = ViewBag.CurrentPage - 1, searchQuery = Model.SearchQuery, priceFilter = Model.PriceFilter, selectedCategories = Model.SelectedCategories, selectedGroupCategories = Model.SelectedGroupCategories })" class="prev"><i class="fa-solid fa-chevron-left"></i></a>
                        }
                        else
                        {
                            <span class="prev disabled"><i class="fa-solid fa-chevron-left"></i></span>
                        }

                        <!-- Page Numbers -->
                        @for (int i = 1; i <= ViewBag.TotalPages; i++)
                        {
                            <a href="@Url.Action("Index", new { page = i, searchQuery = Model.SearchQuery, priceFilter = Model.PriceFilter, selectedCategories = Model.SelectedCategories, selectedGroupCategories = Model.SelectedGroupCategories })"
                               class="@(i == ViewBag.CurrentPage ? "active" : "")">
                                @i
                            </a>
                        }

                        <!-- Next Button -->
                        @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                        {
                            <a href="@Url.Action("Index", new { page = ViewBag.CurrentPage + 1, searchQuery = Model.SearchQuery, priceFilter = Model.PriceFilter, selectedCategories = Model.SelectedCategories, selectedGroupCategories = Model.SelectedGroupCategories })" class="next"><i class="fa-solid fa-chevron-right"></i></a>
                        }
                        else
                        {
                            <span class="next disabled"><i class="fa-solid fa-chevron-right"></i></span>
                        }
                    </div>


                </div>

            </div>

        </div>


    </div>
</div>
<!-- Modal (templateOptionsDialog) -->
<div id="templateOptionsDialog" class="hidden flex flex-col justify-content-center items-center">
    <h3 class="text-xl font-semibold mb-4 text-center mt-5" id="templateName">Select the image orientation:</h3>

    <div class="mb-4 mt-4">
        <div id="imageVer" class="mb-4 flex justify-between items-center m-3 px-3">
            <img id="templateImageVer" src="" alt="Vertical Image" class="h-auto mb-4 shadow-md px-2" />
            <img id="templateImageHoz" src="" alt="Horizontal Image" class="h-auto mb-4 shadow-md ms-3 px-2" />
        </div>
    </div>

    <div class="mb-4 flex justify-content-center items-center mx-3 mt-2 space-x-8">
        <label class="inline-flex items-center px-2">
            <input type="radio" name="imageOrientation" value="Ver" class="form-radio text-blue-500" />
            <span>Vertical (Ver)</span>
        </label>

        <label class="inline-flex items-center px-2">
            <input type="radio" name="imageOrientation" value="Hoz" class="form-radio text-blue-500" />
            <span>Horizontal (Hoz)</span>
        </label>
    </div>

    <div class="flex justify-center space-x-2 mt-3">
        <button id="confirmOrientationBtn" class="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 focus:outline-none">Confirm</button>
        <button id="cancelOrientationBtn" class="bg-red-700 text-white py-2 px-4 rounded hover:bg-gray-400 focus:outline-none">Cancel</button>
    </div>
</div>


<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Lắng nghe sự kiện thay đổi trên các radio button
        document.querySelectorAll('input[name="priceFilter"]').forEach(function(radio) {
            radio.addEventListener('change', function() {
                // Gửi form khi radio button thay đổi
                document.getElementById('filterForm').submit();
            });
        });
    });
</script>

<script>
           function applyFilters() {
        const form = document.querySelector('.form-searchtemp'); // Tìm form chứa các dropdown
        const selectedCategories = [];

        // Lấy tất cả các checkbox đã chọn và đưa vào mảng selectedCategories
        const checkboxes = document.querySelectorAll('.categoryFilter:checked');
        checkboxes.forEach((checkbox) => {
            selectedCategories.push(checkbox.value);
        });

        // Cập nhật giá trị của hidden input để gửi thông tin selectedCategories
        const selectedCategoriesInput = document.querySelector('input[name="selectedCategories"]');
        selectedCategoriesInput.value = selectedCategories.join(','); // Ghép các giá trị lại với nhau bằng dấu phẩy

        // Gửi form
        form.submit(); // Submit form ngay khi thay đổi
    }


</script>

<script>
    // Hàm lấy giá trị của cookie theo tên
    function getCookie(name) {
        const nameEQ = name + "=";
        const ca = document.cookie.split(';');
        for (let i = 0; i < ca.length; i++) {
            let c = ca[i].trim();
            if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
        }
        return null; // Nếu không tìm thấy cookie, trả về null
    }

    document.addEventListener('DOMContentLoaded', function () {
        try {
            // Lắng nghe sự kiện click của các nút "Use This Card"
            document.querySelectorAll('.btn-buy').forEach(button => {
                button.addEventListener('click', function () {
                    // Lấy UserID từ cookie
                    const userIdCookie = getCookie("UserID");

                    if (!userIdCookie) {
                        // Nếu không có UserID trong cookie, chuyển hướng người dùng đến trang đăng nhập
                        console.log("UserID không có trong cookie, chuyển hướng đến Login...");
                        window.location.href = '/Account/Login'; // Chuyển hướng đến trang đăng nhập
                        return; // Dừng lại, không tiếp tục thực hiện các bước sau
                    }

                    try {
                        // Lấy templateId từ data attribute của nút "Use This Card"
                        const templateId = button.closest('.item-a1').dataset.templateId;

                        // Lấy thông tin template từ server qua fetch
                        fetch(`/ECard/GetTemplateDetails/${templateId}`)
                            .then(response => response.json())
                            .then(template => {
                                try {
                                    // Lưu thông tin template vào window.selectedTemplate
                                    window.selectedTemplate = template;

                                    // Cập nhật hình ảnh và tên template vào modal
                                    const imageVer = document.getElementById('templateImageVer');
                                    const imageHoz = document.getElementById('templateImageHoz');
                                    const templateNameElem = document.getElementById('templateName');

                                    if (imageVer && imageHoz) {
                                        imageVer.src = `/images/templates/img/${template.imgVer}`;
                                        imageHoz.src = `/images/templates/img/${template.imgHoz}`;
                                    }

                                    if (templateNameElem) {
                                        templateNameElem.textContent = template.name;
                                    }

                                    // Hiển thị modal
                                    const modal = document.getElementById('templateOptionsDialog');
                                    if (modal) {
                                        modal.classList.remove('hidden'); // Bỏ class 'hidden' để hiển thị modal
                                        modal.style.opacity = 1; // Thêm hiệu ứng mờ khi hiển thị
                                    } else {
                                        console.error('Modal không tồn tại!');
                                    }
                                } catch (innerError) {
                                    console.error('Lỗi khi cập nhật modal:', innerError);
                                }
                            })
                            .catch(error => {
                                console.error('Lỗi khi lấy thông tin template:', error);
                            });
                    } catch (error) {
                        console.error('Lỗi trong sự kiện click của btn-buy:', error);
                    }
                });
            });

            // Xử lý sự kiện "Confirm Orientation"
            document.getElementById('confirmOrientationBtn').addEventListener('click', function () {
                try {
                    const selectedOrientation = document.querySelector('input[name="imageOrientation"]:checked');
                    if (selectedOrientation) {
                        const templateId = window.selectedTemplate.id;
                        const imgVer = window.selectedTemplate.imgVer;
                        const imgHoz = window.selectedTemplate.imgHoz;
                        const orientation = selectedOrientation.value;

                        // Log các giá trị để kiểm tra
                        console.log("UserID từ cookie:", getCookie("UserID"));
                        console.log("TemplateID:", templateId);
                        console.log("Orientation:", orientation);

                        // Chuyển hướng tới trang thiết kế với UserID
                        window.location.href = `/ECard/ECardDesign?templateId=${templateId}&imgVer=${imgVer}&imgHoz=${imgHoz}&orientation=${orientation}&userId=${getCookie("UserID")}`;
                    } else {
                        alert("Vui lòng chọn hướng ảnh (Dọc hoặc Ngang) trước khi tiếp tục.");
                    }
                } catch (error) {
                    console.error('Lỗi trong sự kiện click của confirmOrientationBtn:', error);
                }
            });

            // Xử lý sự kiện "Cancel Orientation"
            document.getElementById('cancelOrientationBtn').addEventListener('click', function () {
                try {
                    // Ẩn modal khi bấm nút Hủy
                    const modal = document.getElementById('templateOptionsDialog');
                    if (modal) {
                        modal.classList.add('hidden'); // Thêm lại class 'hidden' để ẩn modal
                        modal.style.opacity = 0; // Đảm bảo opacity về 0 khi ẩn
                    } else {
                        console.error('Modal không tồn tại khi hủy!');
                    }
                } catch (error) {
                    console.error('Lỗi trong sự kiện click của cancelOrientationBtn:', error);
                }
            });

        } catch (error) {
            console.error('Lỗi trong sự kiện DOMContentLoaded:', error);
        }
    });
</script>








<script>
    // Submit the form when the search icon is clicked
    document.getElementById("searchButton").onclick = function() {
        document.getElementById("searchForm").submit();
    };

    // Optional: Submit the form when the user presses Enter in the search input field
    document.getElementById("searchQuery").addEventListener("keypress", function(event) {
        if (event.key === "Enter") {
            event.preventDefault(); // Prevent the default form submission
            document.getElementById("searchForm").submit(); // Submit the form
        }
    });
</script>


<script>
    // Lấy các phần tử cần thiết
    const dropdownButton = document.getElementById('dropdownButton');
    const dropdownMenu = document.getElementById('dropdownMenu');

    // Thêm sự kiện click cho button
    dropdownButton.addEventListener('click', () => {
      // Kiểm tra xem menu đã được mở chưa
      if (dropdownMenu.classList.contains('hidden')) {
        // Nếu chưa, mở menu
        dropdownMenu.classList.remove('hidden');
      } else {
        // Nếu menu đã mở, đóng menu
        dropdownMenu.classList.add('hidden');
      }
    });
</script>

